AWSTemplateFormatVersion: '2010-09-09'
Description: Windows-based infrastructure with S3, Lambda, and SNS integration

Resources:
  # Secure S3 Bucket
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "data-bucket-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # EC2 IAM Role
  EC2S3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${DataBucket.Arn}/*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EC2S3Role]

  # Windows EC2 Instance
  WindowsEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ff8a91507f77f867  # Windows Server 2022 Base (Update region-specific AMI)
      InstanceType: t3.medium
      KeyName: YourKeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: 
        Fn::Base64: !Sub |
          <powershell>
          Initialize-EC2Instance -DriveLetter 'E' -DeviceName xvdf
          Set-ExecutionPolicy RemoteSigned -Force
          Install-WindowsFeature Web-Server
          </powershell>

  # Lambda Execution Role
  LambdaSNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref NotificationTopic

  # Lambda Function
  S3TriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaSNSRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import os, boto3
          def lambda_handler(event, context):
              sns = boto3.client('sns')
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  sns.publish(
                      TopicArn=os.environ['SNS_TOPIC'],
                      Message=f"New Windows file: s3://{bucket}/{key}"
                  )
              return {'statusCode': 200}
      Environment:
        Variables:
          SNS_TOPIC: !Ref NotificationTopic

  # S3 Event Configuration
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt S3TriggerLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt DataBucket.Arn

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: WindowsFileUploads

  # S3 Notification
  BucketNotification:
    Type: AWS::S3::Bucket
    DependsOn: LambdaPermission
    Properties:
      Bucket: !Ref DataBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt S3TriggerLambda.Arn

Outputs:
  WindowsInstanceID:
    Value: !Ref WindowsEC2
  S3BucketName:
    Value: !Ref DataBucket
  SNSTopicARN:
    Value: !Ref NotificationTopic
